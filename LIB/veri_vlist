#!/usr/local/bin/perl
use strict; use warnings;
use Digest::SHA;

my ($target, $out) = @ARGV;
die "ARG1 target ARG2 out-file\n" unless (defined $out);
die "FAIL target-dir $target $!\n" unless (-d $target);

my (%one);
my (@target, @FILE);

gen_VLIST();
out_VLIST();

print "$_\n" for @FILE;

##########################
sub out_VLIST
{
	open(my $vfh, '>', $out); 
	print $vfh "$one{$_} $_\n" for (keys %one);
	close $vfh;
}
sub gen_VLIST
{
	dir_walk($target, \&print_file);
	chomp @FILE;
	for (@FILE)
	{
		my $sha = f_digest($_);
		$one{$_} = $sha;
	}
}
##########################
sub f_digest 
{
    my ($filename) = @_;
    my $digest = Digest::SHA->new(256);
    $digest->addfile($filename, "b");
    return $digest->hexdigest();
}
sub slurp 
{
	my ($file) = @_;
	my $subfh; 
	my @slurp;

	open($subfh, '<', $file) or die "FAIL bad $file $!\n";
	@slurp = readline $subfh;
	close $subfh; chomp @slurp;

	return @slurp;
}
sub uniq
{
	my ($ref1, $ref2) = @_;
	my %master;
	my (@set, @one, @two);
	@one = @{$ref1};
	@two = @{$ref2};

	%master = map{$_ => undef} @one;

	for (@two)
	{
		next if (exists $master{$_});
		push(@set,$_);
	}
	return @set;
}
sub dir_walk
{ #dir_walk($DIR, \&print_file);
	my ($DIR, $code) = @_;
	my $dir;
	$DIR =~ s%/\z%%;

	$code->($DIR);

	if (-d $DIR)
	{
		my $file;
		unless(opendir $dir, $DIR)
		{
			warn "FAIL open dir $DIR: $!\n";
			return;
		}
		while ($file = readdir $dir)
		{
			next if $file eq '.' || $file eq '..';
			dir_walk("$DIR/$file", $code);
		}
	}
}
sub print_file
{
	push @FILE, $_[0] if -f $_[0];
}
